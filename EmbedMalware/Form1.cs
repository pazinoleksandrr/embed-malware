using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Threading;
using System.Security.Cryptography;


namespace EmbedMalware
{
    public partial class Form1 : Form
    {
        double THRESHOLD = 8.0; double DIVIDEOPERATOR = 2.0; String StatusOfThatWindow = "Normal";
        int StartEmbedDetected = 0; int StopEmbedDetected = 0;
        bool confirmEmbeddedIsThere = false;
        
        bool firstSensor = false;
        bool secondSensor = false;
        bool bindingFirstAndSecondSensortoIndicateStartAndStopEmbeddedRegion1 = false;
        bool bindingFirstAndSecondSensortoIndicateStartAndStopEmbeddedRegion2 = false;
        double pertubationValue = 0.0;
        int lastVer2 = 0;
        int fileCounter = 0;
        int EXESize;
        int JPEGSize;
        int start; // count the start location of EXE insertion in JPEG binary
        List<int> Estart = new List<int>();
        List<int> Estop = new List<int>();
        int last;// count the last location of EXE insertion in JPEG binary
        string EmbedEXE;
        string EmbedJPEG;
        //string NewEmbedJPEG;
        string EmbedAllJPEG;

        //-------------ok------------
        //path for all dirs
        string strPathJPG = @"C:\project\JPEG1";
        string strPathEXE = @"C:\project\EXE";
        string strPathEmbed = @"C:\project\Embedded";
        string strPathRestoredJPG = @"C:\project\Restored~JPEG";
        string strPathRestoredEXE = @"C:\project\Restored~EXE";

        //// all variables related to checkHash()
        // check hash values
        string strOriEXE = "";
        string strOriJPG = "";
        string strEmbedFile = "";
        string strRestoredFile = "";
        string strRestoredEXE = "";
        //------------------------------

        static Random
            rdm = new Random();

        //generate form each time executed

        public Form1()
        {
            InitializeComponent();
        }

        //button when click will reset the text area
        private void clear_Click(object sender, EventArgs e)
        {
            this.Text = "";
            rtbOut1.Clear();
        }

        //this method will embed the JPEG file with exe file


        //used by checkHash function
        static string ByteArrayToString(byte[] arrInput)
        {
            int i = 0;
            StringBuilder sOutput = new StringBuilder(arrInput.Length);
            for (i = 0; i < arrInput.Length - 1; i++)
            {
                sOutput.Append(arrInput[i].ToString("X2"));
            }
            return sOutput.ToString();
        }

        private void checkHash()
        {
            byte[] RestoredEXE = File.ReadAllBytes(strPathRestoredEXE + strRestoredEXE);
            rtbOut1.AppendText("EXE's restored Length " + RestoredEXE.Length + "\n"); ;
            byte[] RestoredJPG = File.ReadAllBytes(strPathRestoredJPG + strRestoredFile);
            rtbOut1.AppendText("JPEG's restored Length " + RestoredJPG.Length + "\n"); ;
            this.Text = "Done"; rtbOut1.AppendText("\n\n\n");

            //compute HASH value

            byte[] tmpSource;
            byte[] tmpSource2;
            byte[] tmpSourceEXE;
            byte[] tmpHash;
            byte[] tmpHashEXE;

            // SourceData
            tmpSource = File.ReadAllBytes(strPathJPG + strOriJPG);
            //Create a byte array from source data

            //Compute hash based on source data
            tmpHash = new MD5CryptoServiceProvider().ComputeHash(tmpSource);
            rtbOut1.AppendText("JPEG's Integrity Verification" + "\n\n\n" + " Original JPEG Hash Value: " + ByteArrayToString(tmpHash) + "\n");

            //read all byte in strPathEmbed
            tmpSource2 = File.ReadAllBytes(strPathEmbed + strEmbedFile);

            byte[] tmpNewHash;

            tmpNewHash = new MD5CryptoServiceProvider().ComputeHash(tmpSource2);
            rtbOut1.AppendText(" Embedded JPEG Hash Value: " + ByteArrayToString(tmpNewHash) + "\n");



            //Source EXE
            tmpSourceEXE = File.ReadAllBytes(strPathEXE + strOriEXE);
            //Create a byte array from source data

            //////Compute hash based on source data
            tmpHashEXE = new MD5CryptoServiceProvider().ComputeHash(tmpSourceEXE);
            rtbOut1.AppendText("EXE's Integrity Verification" + "\n\n\n" + " Original EXE Hash Value: " + ByteArrayToString(tmpHashEXE) + "\n");


            //write the data in log file
            StreamWriter SWL = File.AppendText(@"C:\project\Embedded Data\LogFile.txt");
            SWL.WriteLine("Total EXE:" + EXETotal);
            SWL.WriteLine("Total JPEG:" + sizeJPEG);

            SWL.WriteLine("Stop inserting EXE binary at :" + last);
            SWL.WriteLine("EXE's restored Length " + RestoredEXE.Length);
            SWL.WriteLine("JPEG's restored Length " + RestoredJPG.Length);
            SWL.WriteLine(" Original JPEG Hash Value: " + ByteArrayToString(tmpHash));
            SWL.WriteLine(" Embedded JPEG Hash Value: " + ByteArrayToString(tmpNewHash));
            //       SWL.WriteLine("Restored JPEG Hash Value:" + ByteArrayToString(tmpNewHash1));
            SWL.Close();
            rtbOut1.AppendText("\n Compare the " + strPathJPG + strOriJPG + " with " + strPathEmbed + strEmbedFile + "\n");
            CompareHash(tmpHash, tmpNewHash);

            //------------source3
            tmpSource2 = File.ReadAllBytes(strPathRestoredJPG + strRestoredFile);

            tmpNewHash = null; ;

            tmpNewHash = new MD5CryptoServiceProvider().ComputeHash(tmpSource2);
            rtbOut1.AppendText(" Embedded JPEG Hash Value: " + ByteArrayToString(tmpNewHash) + "\n");


            rtbOut1.AppendText("\n Compare the " + strPathJPG + strOriJPG + " with " + strPathRestoredJPG + strRestoredFile + "\n");

            CompareHash(tmpHash, tmpNewHash);

        }

        //used in check hash method
        void CompareHash(byte[] tmpHash, byte[] tmpNewHash)
        {

            bool bEqual = false;
            if (tmpNewHash.Length == tmpHash.Length)
            {
                int i = 0;
                while ((i < tmpNewHash.Length) && (tmpNewHash[i] == tmpHash[i]))
                {
                    i += 1;
                }
                if (i == tmpNewHash.Length)
                {
                    bEqual = true;
                }
            }

            if (bEqual)
                rtbOut1.AppendText("The two hash values are the same\n\n");

            else
                rtbOut1.AppendText("The two hash values are not the same\n\n");
            // Console.ReadLine();
        }


        //button extract that will trigger extract funtion
        private void btnExtract_Click(object sender, EventArgs e)
        {
            Extract();
        }

        //this method perform extract method
        private void Extract()
        {

            String[] arrEXE = Directory.GetFiles(@"C:\project\EXE");
            String[] arrNewJpeg = Directory.GetFiles(@"C:\project\Embed All");

            for (int c = 0; c < arrEXE.Length; c++)
            {
                string actualEXE = arrEXE[c];
                string EmbedJPEG = arrNewJpeg[c];
            }

            byte[] EXE = File.ReadAllBytes(strPathEXE);
            byte[] NewJPEG = File.ReadAllBytes(txtNewJPEG.Text);

            int EXESize = EXE.Length;
            int JPEGSize = NewJPEG.Length;

            FileStream fsRestoredNewJPEG = File.Create(@"C:\project\log1.txt");
            BinaryWriter SWW2 = new BinaryWriter(fsRestoredNewJPEG);
            FileStream fsRestoredJPEG = File.Create(@"C:\project\Extracted File JPEG\ExtractedJPEG.jpg");
            BinaryWriter SWRestoreJPEG = new BinaryWriter(fsRestoredJPEG);

            // implant exe at random location number
            int at = NewJPEG.Length;
            int cnt = 0;




            foreach (byte x in NewJPEG)
            {
                //extract EXE from JPEG

                if ((cnt >= NewJPEG.Length - EXESize))
                {
                    SWW2.Write((byte)(x + 1));
                    //d++;
                }
                else
                {
                    SWRestoreJPEG.Write(x);

                } cnt++;
                // return;
            }

            SWW2.Close();
            SWRestoreJPEG.Close();

            byte[] RestoredNewJPEG = File.ReadAllBytes(@"C:\project\Extracted File JPEG\ExtractedJPEG.jpg");
            rtbOut1.AppendText("Size of Embedded JPEG is: " + NewJPEG.Length + "\n" + "Size of Original JPEG is: " + RestoredNewJPEG.Length + "\n"); ;
            StreamWriter EXT = File.AppendText(@"C:\project\Extracted File JPEG\ExtractedJPEG.txt");

            foreach (byte x in RestoredNewJPEG)
            {
                EXT.WriteLine("Size of Embedded JPEG is: " + NewJPEG.Length + "\n" + "Size of Original JPEG is: " + RestoredNewJPEG.Length + "\n");
            }
            EXT.Close();
        }


        private void btnEA_Click(object sender, EventArgs e)
        {
 

            //getfiile from directory
            List<string> files = new List<string>();
            string[] arr = Directory.GetFiles(@"C:\project\EXE");
            string[] arr1 = Directory.GetFiles(@"C:\project\JPEG1");
            int TotalFileEXE = arr.Length;
            int TotalFileJPEG = arr1.Length;

            rtbOut1.AppendText("Total EXE Files:" + TotalFileEXE + "\n" + "Total JPEG Files:" + TotalFileJPEG + "\n\n");

            String[] filesW = Directory.GetFiles(@"C:\project\Embed All 1\Restored JPEG");
            String[] filesX = Directory.GetFiles(@"C:\project\Embed All 1\Restored EXE");
            String[] filesEmbedAll = Directory.GetFiles(@"C:\project\Embed All\");

            //This loop will delete files in C:\project\Embed All 1\Restored JPEG
            foreach (String fW in filesW)
            {
                File.Delete(fW);
            }
            //This loop will delete files in C:\project\Embed All 1\Restored EXE
            foreach (String fX in filesX)
            {
                File.Delete(fX);
            }
            //This loopp will delete files in C:\project\Embed All\
            foreach (String fEA in filesEmbedAll)
            {
                File.Delete(fEA);
            }
            if (File.Exists(@"C:\project\summary\" + "SummaryResult.txt"))
                File.Delete(@"C:\project\summary\" + "SummaryResult.txt");
            //--------write Summary------------------
            StreamWriter summary1 = File.AppendText(@"C:\project\summary\" + "SummaryResult.txt");
            summary1.WriteLine("shortFileNames" + "," + "THRESHOLD" + "," + "DIVIDEOPERATOR" + "," + "AllEmbed.Length" + "," + "Counter" + "," + "Estart[fileCounter - 1]" + "," + "Estop[fileCounter - 1]" + "," + "std" + "," + "StartEmbedDetected" + "," + "StopEmbedDetected" + "," + "(Estart[fileCounter - 1] - StartEmbedDetected)" + "," + "(Estop[fileCounter - 1] - StopEmbedDetected)");
            summary1.Close();//--------------------------


            string[] embeddedJPEG;
            // take each files from the EXE dir. and JPEG dir. to combine the binary
            for (int c = 0; c < arr.Length; c++)
            {
                fileCounter++;
                //       if (c == 1) break; //single embed
                EmbedEXE = arr[c]; //exe
                EmbedJPEG = arr1[c];

                EmbedAll();
             embeddedJPEG   = Directory.GetFiles(@"C:\project\Embed All");
                embedded = embeddedJPEG[c];
                ngram();
               // break; //only 1 file
            }

        }

        public void EmbedAll()
        {
            int countw = 0;
            byte[] AllEXE = File.ReadAllBytes(EmbedEXE);
            byte[] AllJPEG = File.ReadAllBytes(EmbedJPEG);

            EXESize = AllEXE.Length;
            JPEGSize = AllJPEG.Length;

            string[] shortNames = EmbedJPEG.Split('\\');


            //    double ratio = Convert.ToDouble(EXESize) / JPEGSize;
            //getting the middlepoint value for each jpeg to embed
            //setting the maximum tolerance level to locate the embedded exe
            //at = middlePoint * 2 - 300; <---proven value!!!
            int middlePoint = JPEGSize / 2;
            int toleranceRange = 300;
            int at = rdm.Next(JPEGSize - toleranceRange, JPEGSize - toleranceRange);// implant exe at certain location
            start = at;
            Estart.Add(at);
            //middle point just for showing, embed occur at another place for now!            
            //Embed occur at location 300 byte before end!
            rtbOut1.AppendText("Total EXE:" + EXESize + "\n\n" + "Total JPEG:" + JPEGSize + "," + "middlePoint" + "," + middlePoint + "," + "at" + "," + at + "\n\n");

            List<byte> JPEGBinary = new List<byte>(AllJPEG);

            byte[] TempJPEGBinary = JPEGBinary.ToArray();
            string[] shortFileNames = EmbedJPEG.Split('\\');


            File.Delete(@"C:\project\Embed All\" + shortFileNames[shortFileNames.Length - 1]);


            FileStream fs = File.Create(@"C:\project\Embed All\" + shortFileNames[shortFileNames.Length - 1]);

            BinaryWriter SWW = new BinaryWriter(fs);

            bool t = false;
            List<byte> Raw = new List<byte>();
            int count = 0;
            // at = TempJPEGBinary.Length / 2;
            foreach (byte aa in TempJPEGBinary)
            {
                count++;

                if (count == at)
                {
                    last = 0;
                    //insert EXE binary data
                  
                    foreach (byte c in AllEXE)
                    { last++;
                        countw++;
                        if (t == false)
                        {
                            t = true;
                            rtbOut1.AppendText("Begin inserting EXE binary at :" + at + "\nfirst byte is :" + c + "\n");
                        }

                        if (last == AllEXE.Length)
                        {
                            rtbOut1.AppendText("last s :" + c + "\n");
                            rtbOut1.AppendText("Stop inserting EXE binary at :" + lastVer2 + "\n");
                            lastVer2 = last + count;
                            Estop.Add(lastVer2);
                        }

                        int hhData = encode(c, 3);

                        SWW.Write((byte)(hhData)); //ceasar key

                        
                    }
                    SWW.Write(aa);
                }
                else
                {
                    SWW.Write(aa);
                }
                // start++;
            }
            SWW.Close();

            /*******************restore exe and jpeg files**********************************/

            byte[] NewJPEG = File.ReadAllBytes(@"C:\project\Embed All\" + shortFileNames[shortFileNames.Length - 1]);
            int NewJPEGlength = NewJPEG.Length;
            FileStream fsRestoredEXE = File.Create(@"C:\project\Embed All 1\Restored EXE\" + shortFileNames[shortFileNames.Length - 1] + "Restored EXE.txt");
            BinaryWriter binEXE = new BinaryWriter(fsRestoredEXE);
            FileStream fsRestoredJPEG = File.Create(@"C:\project\Embed All 1\Restored JPEG\" + shortFileNames[shortFileNames.Length - 1] + "Restored JPEG.jpg");
            BinaryWriter binJPEG = new BinaryWriter(fsRestoredJPEG);
            int cnt = 1;
            int d = 1;
            int aaq = at + EXESize;

            for (cnt = at - 1; cnt <= aaq; cnt++)  //byte x in NewJPEG) //foreach (byte x in NewJPEG)
            {
                byte x = NewJPEG[cnt];
                if ((cnt >= at - 1) && (d <= EXESize))
                {
                    int yy = decode(x, 3);
                    binEXE.Write((byte)(yy));

                    if ((cnt >= at) && (cnt < at + 3))
                    {
                        byte x1 = NewJPEG[cnt - 1];
                        rtbOut1.AppendText("Begin Restoring EXE binary at :" + cnt + "\nfirst byte is :" + x1 + "\n");
                    }
                    d++;
                }

                if (cnt > (aaq))
                    break;
            }

            binEXE.Close();
            binJPEG.Close();
            //End restore
            byte[] RestoredEXE = File.ReadAllBytes(@"C:\project\Embed All 1\Restored EXE\" + shortFileNames[shortFileNames.Length - 1] + "Restored EXE.txt");
            rtbOut1.AppendText("EXE's restored Length " + RestoredEXE.Length + "\n"); ;
            byte[] RestoredJPG = File.ReadAllBytes(@"C:\project\Embed All 1\Restored JPEG\" + shortFileNames[shortFileNames.Length - 1] + "Restored JPEG.jpg");
            rtbOut1.AppendText("JPEG's restored Length " + RestoredJPG.Length + "\n"); ;
            this.Text = "Done"; rtbOut1.AppendText("\n");

            /********************************************************/
            //compute HASH value
            byte[] tmpSource2;
            byte[] tmpSource3;

            tmpSource2 = File.ReadAllBytes(@"C:\project\Embed All\" + shortFileNames[shortFileNames.Length - 1]);

            byte[] tmpNewHash;

            tmpNewHash = new MD5CryptoServiceProvider().ComputeHash(tmpSource2);
            rtbOut1.AppendText(" Embedded JPEG Hash Value: " + ByteArrayToString2(tmpNewHash) + "\n\n");

            tmpSource3 = File.ReadAllBytes(EmbedJPEG);

            byte[] tmpNewHash1;

            tmpNewHash1 = new MD5CryptoServiceProvider().ComputeHash(tmpSource3);
            rtbOut1.AppendText(" Original JPEG Hash Value: " + ByteArrayToString2(tmpNewHash1) + "\n");

            //write the data in log file
            StreamWriter SWL = File.AppendText(@"C:\project\LogDataEmbedAll.txt");
            SWL.WriteLine("Total EXE:" + EXESize + "," + "\r\n" + "Total JPEG:" + JPEGSize + "," + "\r\n" + "Begin inserting EXE binary at :" + at + "," + "\r\n" + "Stop inserting EXE binary at :" + lastVer2 + "," + "\r\n" + "Original JPEG's Hash Value: " + ByteArrayToString2(tmpNewHash1) + "," + "\r\n" + "Embedded JPEG's Hash Value:" + ByteArrayToString2(tmpNewHash));
            SWL.WriteLine("=================================================");
            SWL.Close();

            string delimiter = ",";
            StreamWriter SWL2 = File.AppendText(@"C:\project\embedData.csv");
            //Total EXE, Total JPEG, Start Embed at, Stop Embed at, Original Hash, Embedded Hash
            SWL2.WriteLine(EXESize + delimiter + JPEGSize + delimiter + at + delimiter + lastVer2 + delimiter + ByteArrayToString2(tmpNewHash1) + delimiter + ByteArrayToString2(tmpNewHash));
            SWL2.Close();
            //Console.Write("end.....");
        }
        /********************************************************/
        int encode(int bytX, int stpY)
        {
            bytX = bytX + stpY;
            if (bytX == 256)
            { bytX = 0; }
            if (bytX > 256)
            { bytX = bytX - 256; }
            return bytX;
        }

        /********************************************************/
        int decode(int bytX, int stpY)
        {
            if (bytX == stpY)
            {
                // return  bytX = 255;
            }
            int u = bytX - stpY;
            // if (bytX==0)
            //  { return bytX - stpY; }
            if (u <= 0)
            {
                bytX = bytX + 256 - stpY;
            }
            else
            {
                bytX = bytX - stpY;
            }
            if (bytX == 256) return 0;
            return bytX;
        }
        /********************************************************/
        //used by hash function in embedAll method
        static string ByteArrayToString2(byte[] arrInput1)
        {
            int i = 0;
            StringBuilder sOutput = new StringBuilder(arrInput1.Length);
            for (i = 0; i < arrInput1.Length - 1; i++)
            {
                sOutput.Append(arrInput1[i].ToString("X2"));
            }
            return sOutput.ToString();
        }

        /**********************************No use for now (4 Dec 2013)***************************************************************/
        private void btnExtractAll_Click(object sender, EventArgs e)
        {
            List<string> files = new List<string>();
            //string[] shortFileNamesAll = EmbedAllJPEG.Split('\\'); 
            string[] arr2 = Directory.GetFiles(@"C:\project\Embed All");

            //int TotalFileJPEG = arr2.Length;

            for (int c = 0; c < arr2.Length; c++)
            {
                EmbedAllJPEG = arr2[c];
                ExtractAll();
                // break;
            }
        }
        public void ExtractAll()
        {
            String[] filesJpg = Directory.GetFiles(@"C:\project\Extracted File JPEG\");

            foreach (String fj in filesJpg)
            {
                File.Delete(fj);
            }

            string[] arr1 = Directory.GetFiles(@"C:\project\EXE");
            string[] shortFileNamesEXE = EmbedEXE.Split('\\');
            string[] shortFileNamesAll = EmbedAllJPEG.Split('\\');

            //read byte of infected JPEG
            byte[] AllEmbedJPEG = File.ReadAllBytes(EmbedAllJPEG);
            //read byte of malware
            byte[] EXE = File.ReadAllBytes(@"C:\project\EXE" + shortFileNamesEXE[shortFileNamesEXE.Length - 1]);

            int EXETotal = EXE.Length;
            int sizeJPEG = AllEmbedJPEG.Length;

            // StreamWriter EAJ = File.AppendText(@"C:\project\Extracted File JPEG\Log4.txt");

            //foreach (byte h in EXE)
            {
                //    EAJ.WriteLine(h);
            }
            // EAJ.Close();

            List<byte> EXEBinary = new List<byte>(EXE);
            //StreamReader ReadTemp2 = new StreamReader(@"C:\project\Extracted File JPEG\Log4.txt");

            for (int count = 0; count < sizeJPEG; count++)
            {
                EXEBinary.Add(Convert.ToByte(count));
            }
            //ReadTemp2.Close();

            //convert expression to array variable
            byte[] TempEXEBinary = EXEBinary.ToArray();

            FileStream fsRestoredNewJPEG = File.Create(@"C:\project\Extracted File JPEG\Log1.txt");
            BinaryWriter SWW2 = new BinaryWriter(fsRestoredNewJPEG);
            FileStream fsRestoredJPEG = File.Create(@"C:\project\Extracted File JPEG\" + shortFileNamesAll[shortFileNamesAll.Length - 1]);
            BinaryWriter SWRestoreJPEG = new BinaryWriter(fsRestoredJPEG);

            int at = EXE.Length;
            int cnt = 0;
            bool f = true;
            List<byte> Raw1 = new List<byte>();

            foreach (byte x in EmbedAllJPEG)
            {
                //extract EXE from JPEG
                if (at == sizeJPEG)
                {
                    SWRestoreJPEG.Write(x);
                }
                else
                {
                    last = 1;
                    foreach (byte w in EmbedAllJPEG)
                    {
                        if (f == true)
                        {
                            f = false;
                            rtbOut1.AppendText("First byte of exe is: " + w);
                        }
                    }
                    SWW2.Write((byte)(x + 1));
                    last++;
                    rtbOut1.AppendText("Size of Original JPEG is: " + x + "\n");
                }

                cnt++;
            }

            SWW2.Close();
            SWRestoreJPEG.Close();

            byte[] RestoredNewJPEG = File.ReadAllBytes(@"C:\project\Extracted File JPEG\" + shortFileNamesAll[shortFileNamesAll.Length - 1]);
            rtbOut1.AppendText("Size of Embedded JPEG is: " + EmbedAllJPEG.Length + "\n");
            StreamWriter EXT = File.AppendText(@"C:\project\Extracted File JPEG\ExtractedJPEG.txt");

            foreach (byte x in RestoredNewJPEG)
            {
                EXT.WriteLine("Size of Embedded JPEG is: " + EmbedAllJPEG.Length + "\n" + "Size of Original JPEG is: " + RestoredNewJPEG.Length + "\n");
            }
            EXT.Close();

        }
        /**************************Setter and Getter method***************************************************/

        public string EXETotal { get; set; }

        public string sizeJPEG { get; set; }
        /****************************************************Find n-gram for original JPEG*************************************************************/
        string ori;
        string embed;
        private void ngramJPGOri_Click(object sender, EventArgs e)
        {
            string[] oriJPEG = Directory.GetFiles(@"C:\project\JPEG1");
            string[] oriEXE = Directory.GetFiles(@"C:\project\EXE");
            for (int c = 0; c < oriEXE.Length; c++)
            {
                //need to find way to write nyte of individual embedded jpeg to individual text file
                //current solution not working, need to do it manually by changing value of c
                ori = oriJPEG[c];
                embed = oriEXE[c];
                ngramOri();
                ngramEmbed();
            }
            rtbOut1.AppendText("N-gram done!");
        }

        public void ngramOri()
        {

            byte[] AllJPEG = File.ReadAllBytes(ori);

            JPEGSize = AllJPEG.Length;

            string[] shortNames = ori.Split('\\');

            File.Delete(@"C:\project\n-gram\ori\" + shortNames[shortNames.Length - 1] + "Embed.txt");
            List<int> ngram = new List<int>();
            List<int> entropy = new List<int>();

            StreamWriter EAr = File.AppendText(@"C:\project\n-gram\ori\" + shortNames[shortNames.Length - 1] + "Ori.csv");
            int ngramCounter = 0;

            foreach (byte jj in AllJPEG)
             {
                ngramCounter++;

                ngram.Add(jj);
                if (ngramCounter == 100)
                    {
                        int total = 0;
                        foreach (int ggg in ngram)
                            { total = total + ggg; }

                        EAr.Write(total);
                        EAr.Write(",");

                        ngramCounter = 0;

                        ngram.Clear();
                        entropy.Clear();
                    }
                    

             } EAr.Close();
            
        }

        public void ngramEmbed() {

            byte[] AllEXE = File.ReadAllBytes(embed);
            EXESize = AllEXE.Length;

            string[] fileNames = embed.Split('\\');

            File.Delete(@"C:\project\n-gram\exe\" + fileNames[fileNames.Length - 1] + "Embed.txt");
            List<int> ngramExe = new List<int>();
            List<int> entropy = new List<int>();

            StreamWriter EAx = File.AppendText(@"C:\project\n-gram\exe\" + fileNames[fileNames.Length - 1] + ".csv");
            int ngramCounter = 0;

            foreach (byte jj in AllEXE)
             {
                ngramCounter++;

                ngramExe.Add(jj);
                if (ngramCounter == 100)
                    {
                        int total = 0;
                        foreach (int ggg in ngramExe)
                            { total = total + ggg; }

                        EAx.Write(total);
                        EAx.Write(",");

                        ngramCounter = 0;

                        ngramExe.Clear();
                        entropy.Clear();
                    }
                    

             } EAx.Close();
        }

        /****************************************************Find n-gram for embedded JPEG*************************************************************/
        string embedded;
        private void PatternJPEG_Click(object sender, EventArgs e)
        {
            string[] embeddedJPEG = Directory.GetFiles(@"C:\project\Embed All");
            String[] logEmbed = Directory.GetFiles(@"C:\project\Embedded");
            foreach (String fEA in logEmbed)
            {
                File.Delete(fEA);
            }

            for (int c = 0; c < embeddedJPEG.Length; c++)
            {
                //need to find way to write nyte of individual embedded jpeg to individual text file
                //current solution not working, need to do it manually by changing value of c
                embedded = embeddedJPEG[c];
                ngram();
            }
            rtbOut1.AppendText("N-gram done!");
        }
        public void ngram()
        {
            byte[] AllEmbed = File.ReadAllBytes(embedded);
            String[] logEmbed = Directory.GetFiles(@"C:\project\Embedded");
          /*  foreach (String fEA in logEmbed)
            {
                File.Delete(fEA);
            }
            */
            List<byte> jpgNgram = new List<byte>(AllEmbed);
            byte[] TempJpgBin = jpgNgram.ToArray();

            string[] shortFileNames = embedded.Split('\\');
            File.Delete(@"C:\project\n-gram\embed\" + shortFileNames[shortFileNames.Length - 1] + "Embed.txt");

            List<int> ngram = new List<int>();
            List<int> kj = new List<int>();
            

            StreamWriter EA = File.AppendText(@"C:\project\n-gram\embed\" + shortFileNames[shortFileNames.Length - 1] + ".csv");
            int ngramCounter = 0;
            int Counter = -1;
            StreamWriter EAEmbed = File.AppendText(@"C:\project\Embedded\" + shortFileNames[shortFileNames.Length - 1] + "embed.txt");
            //###################################################
            //###################################################
            double previousStdValue = 0; //trace previous val
            bool once = false;
            bool firstRound = true;
            //###################################################
            //###################################################
            double std1 = 0.0;

            foreach (byte j in AllEmbed)
            {
                Counter++;
                int sss = 0;
                if (Counter == 1585999)
                    sss = 9;
                if (Counter == 0)
                    EAEmbed.Write("shortFileNames" + "," + "Length" + "," + "Counter" + "," + "Estart" + "," + "Estop" + "," + "min" + "," + " max" + "," + "mean" + "," + "median" + "," + "variance" + "," + "std" + "," + "status" + "," + "pertubationValue" + "," + "StatusOfThatWindow" + "," + "confirmEmbeddedIsThere" + "," + "StartEmbedDetected" + "," + "StopEmbedDetected" + "\n");

                ngramCounter++;
                
                ngram.Add(j);
                if (ngramCounter == 100)
                {
                    double total = 0;
                    int kk = 0;
                    foreach (int gg in ngram)
                        {
                            kj.Add(gg);
                            kk = gg;
                            total = total + gg;
                        }

                    EA.Write(total);
                    EA.Write(",");
                                       
                    int min = ngram.Min();
                    int max = ngram.Max();

                    double median = 0.0;
                    int[] temp = ngram.ToArray();
                    Array.Sort(temp);
                    int alength = temp.Length;
                    median = temp[alength / 2];

                    double mean = ngram.Average();
                    double variance = 0.0;
                    variance = Math.Pow(( kj[0] - mean), 2) / (ngramCounter);
                    double std =  StandardDeviation(ngram.Select(x => (double) x).ToArray());
                    std1 = std;

                 bool status = false;
                 if (Counter >= Estart[fileCounter-1] && Counter <= Estop[fileCounter-1])
                     {
                         status = true;
                     }
                 else
                 {
                     status = false;
                 }
                //####################
                 if (firstRound == true)
                 {
                     firstRound = false;
                     pertubationValue = 0;
                     StatusOfThatWindow = "Normal";
                     previousStdValue = std;
                 }
                 else{
                 pertubationValue = (previousStdValue + THRESHOLD) / DIVIDEOPERATOR;
                 if (std >= pertubationValue)
                 {
                     StatusOfThatWindow = "Normal";
                     firstSensor = false;
                     secondSensor = false; confirmEmbeddedIsThere = false;
                 }
                 else
                 {
                     StatusOfThatWindow = "EmbeddedData";
                    
                     if (firstSensor == true)
                     {
                         secondSensor = true;
                         confirmEmbeddedIsThere = true;
                         if (once == false)
                         {
                             once = true;
                             StartEmbedDetected = Counter;
                         }
                         if (bindingFirstAndSecondSensortoIndicateStartAndStopEmbeddedRegion1 == true)
                         {
                             bindingFirstAndSecondSensortoIndicateStartAndStopEmbeddedRegion2 = true;
                             StopEmbedDetected = Counter;
                         }
                         if (bindingFirstAndSecondSensortoIndicateStartAndStopEmbeddedRegion1 == false)
                         {
                             bindingFirstAndSecondSensortoIndicateStartAndStopEmbeddedRegion1 = true;

                         }

                     }
                     if (firstSensor == false)
                     { firstSensor = true; confirmEmbeddedIsThere = false; }
                 }
                 }
                    //######################

                 EAEmbed.Write(shortFileNames[shortFileNames.Length - 1] + "," + AllEmbed.Length + "," + Counter + "," + Estart[fileCounter - 1] + "," + Estop[fileCounter - 1] + "," + +min + "," + max + "," + mean + "," + median + "," + variance + "," + std + "," + status + "," + pertubationValue + "," + StatusOfThatWindow + "," + confirmEmbeddedIsThere + "," + StartEmbedDetected + "," + StopEmbedDetected + "\n");
                 previousStdValue = std;
                     ngramCounter = 0;

                    kj.Clear();
                    ngram.Clear();
                   
                }
            }
            //--------write Summary------------------
            StreamWriter summary = File.AppendText(@"C:\project\summary\" + "SummaryResult.txt");
            summary.WriteLine(shortFileNames[shortFileNames.Length - 1] + "," + THRESHOLD + "," + DIVIDEOPERATOR + "," + AllEmbed.Length + "," + Counter + "," + Estart[fileCounter - 1] + "," + Estop[fileCounter - 1] + "," + std1 + "," + StartEmbedDetected + "," + StopEmbedDetected + "," + (Estart[fileCounter - 1] - StartEmbedDetected) + "," + (Estop[fileCounter - 1] - StopEmbedDetected));
            //--------------------------
            summary.Close();
            EAEmbed.Close();
                    EA.Close();
                    start = 0;
                    last = 0;
    
        }



        /*******************************************8*/

        
             List<double> dat6 = new List<double>();

      

                    
            private static double StandardDeviation(double[] data)
        {

            double ret = 0;
            double DataAverage = 0;
            double TotalVariance = 0;
            int Max = 0;

            try
            {

                Max = data.Length;

                if (Max == 0) { return ret; }

                //DataAverage = Average(data);

                for (int i = 0; i < Max; i++)
                {
                    TotalVariance += Math.Pow(data[i] - DataAverage, 2);
                }

                ret = Math.Sqrt(SafeDivide(TotalVariance, Max));

            }
            catch (Exception) { throw; }
            return ret;
        }

        private static double SafeDivide(double value1, double value2)
        {

            double ret = 0;

            try
            {

                if ((value1 == 0) || (value2 == 0)) { return ret; }

                ret = value1 / value2;

            }
            catch { }
            return ret;
        }

        private void txtEXE_TextChanged(object sender, EventArgs e)
        {

        }
    }           
}






